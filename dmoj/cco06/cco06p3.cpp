/**
 * cco06p3 - CCO '06 P3 - Codec
 *
 * This is really cool program, where you have to encode an input file. I ended up
 * implementing a order-1 huffman encoder, which uses weights created by looking at
 * samples offline. It being order-1 means that we base the current probabilites based
 * on the previous character.
 *
 * We build the 96 Huffman trees at the beginning of the program, needed to both encode
 * and decode.
 *
 * This doesn't score a 100%, I have tested it on a lot of inputs and it seems that for
 * some, I am simply not able to hit the maximum 4 bits per byte limit. I am looking into
 * Arithmetic coding, to possibly improve the time we have here. The problem is that for
 * the shorter inputs, this is going to be too long and I'll get 0 points for those test
 * cases. It might be an idea to use the first bit to indicate if I'm using the default
 * huffman encoding, or if I'm giving the weights, in order for this to be good.
 *
 * Initial testing indicate that it would not be good enough. I am also wondering if
 * adaptive encoding would work, but I don't think it would add much. It would be
 * interesting to see if there is a possiblity of using a 2 order model to make this even
 * more robust, but I fear for the memory usage then, and I don't really find it all that
 * interesting.
 *
 * https://en.wikipedia.org/wiki/Huffman_coding#/media/File:Huffman_coding_visualisation.svg
 * https://en.wikipedia.org/wiki/Arithmetic_coding#Adaptive_arithmetic_coding
 *
 * https://www.nayuki.io/page/reference-arithmetic-coding
 * https://marknelson.us/posts/2014/10/19/data-compression-with-arithmetic-coding.html
 * https://marknelson.us/posts/1991/02/01/arithmetic-coding-statistical-modeling-data-compression.html
 */
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <cstdint>
#include <iterator>
#include <string_view>
#include <array>
#include <queue>
#include <forward_list>

using UT = std::uint64_t;
using ST = std::int64_t;

constexpr char firstContext = '\n';

[[nodiscard]] char decodeNum(const std::uint8_t num) {
	if (num == 0)
		return '\n';
	else
		return static_cast<char>(31 + num);
}

[[nodiscard]] std::uint8_t encodeChar(const char c) {
	if (c == '\n')
		return 0;
	else
		return static_cast<std::uint8_t>(c - 31);
}

// We are creating a huffman tree
class HuffmanTree {
	private:
		struct Node {
			// This is the mapped char value.
			// 255 means nothing, but it's outside the range
			std::uint8_t val{255};
			
			// We are just using non owning pointers here,
			// the nodes will live as long as the huffman tree does.
			// It is worth nothing that either both of these are set
			// or none are.
			Node* left{nullptr};
			Node* right{nullptr};

			Node() = default;
			explicit Node(std::uint8_t v) : val{v} {}


			[[nodiscard]] bool isLeaf() const {
				return left == nullptr;
			}
		};
	
		// This stores all the nodes, except the root node.
		// This needs to be a list and not a vector, because we are
		// keeping the points to these elements in it.
		std::forward_list<Node> nodes_;
	
		// This is our root nodes, it always exist.
		struct Node* root_{nullptr};

	public:
		HuffmanTree(const std::array<std::uint64_t, 96>& weights) {
			using PR = std::pair<std::uint64_t, struct Node*>;
			std::priority_queue<PR, std::vector<PR>, std::greater<PR>> Q;
			
			for (UT i = 0; i < 96; i++) {
				nodes_.emplace_front(i);
				Q.emplace(weights[i], &nodes_.front());
			}

			// ok now we have all the nodes and their pointers.
			while (1 < Q.size()) {
				// We take the two first elements.
				const auto a = Q.top(); Q.pop();
				const auto b = Q.top(); Q.pop();

				// Now we create the new node that we want.
				nodes_.emplace_front();
				auto& fr = nodes_.front();

				fr.left = a.second;
				fr.right = b.second;

				Q.emplace(a.first + b.first, &fr);
			}

			root_ = Q.top().second;
		}

		// Returns the bit string for each symbol.
		[[nodiscard]] std::array<std::string, 96> buildCodes() const {
			std::array<std::string, 96> codes;
			using PR = std::pair<std::string, Node*>;
			std::queue<PR> Q;
			Q.emplace("", root_);

			while (!Q.empty()) {
				const auto [prefix, node] = Q.front();
				Q.pop();

				if (node->isLeaf()) {
					codes[node->val] = prefix;
					continue;
				}

				Q.emplace(prefix + "0", node->left);
				Q.emplace(prefix + "1", node->right);
			}

			return codes;
		}

		[[nodiscard]] std::uint8_t decodeBitStream(std::istreambuf_iterator<char>& it) const {
			std::istreambuf_iterator<char> end;

			Node* cur = root_;
			// we run until end or newline.
			for (; it != end && *it != '\n'; it++) {
				if (cur->isLeaf())
					return cur->val;

				if (*it == '0')
					cur = cur->left;
				else
					cur = cur->right;
			}
			if (cur->isLeaf())
				return cur->val;

			throw std::runtime_error("Invalid input string!");
		}
};

// we are putting this at the bottom, to avoid all the mess in the input.
std::vector<HuffmanTree> TREES;
void build_trees();


void decode_mode() {
	std::istreambuf_iterator<char> it(std::cin), end;
	// Skip first new line after number
	it++;

	// We always assume the first character is a space.
	auto prev = encodeChar(firstContext);

	std::ostringstream buf;
	
	// we run until end or newline.
	while (it != end && *it != '\n') {
		auto cur = TREES[prev].decodeBitStream(it);
		prev = cur;
		buf << decodeNum(cur);
	}

	std::cout << buf.str();
}


void encode_mode() {
	// Prepare all the codes we need to check this.
	std::array<std::array<std::string, 96>, 96> codes;
	for (UT i = 0; i < 96; i++) {
		codes[i] = TREES[i].buildCodes();
	}

	
	std::istreambuf_iterator<char> it(std::cin), end;
	// Skip first new line after number
	it++;
	
	// For the first character, we use the space table.
	auto prev = encodeChar(firstContext);

	std::ostringstream buf;
	for (; it != end; it++) {
		const auto cur = encodeChar(*it);
		buf << codes[prev][cur];
		prev = cur;
	}

	buf << '\n';

	std::cout << buf.str();
}


int main() {
	std::cin.sync_with_stdio(0);
	std::cin.tie(0);

	// Build the 96 trees we need.
	build_trees();

	// We are going to go with a 
	int T = 0;
	std::cin >> T;

	if (T == 1) {
		encode_mode();
	} else if (T == 2) {
		decode_mode();
	}
	
	return 0;
}

// Generated using the `cco06p3-create-weights.py` program.
// 10 = 0, 32 = 1 33 = 2, ....

#ifdef ONLINE_JUDGE
constexpr std::array<std::array<std::uint64_t, 96>, 96> FREQ{{
{3016,4876,1,1974,1,0,0,0,1,15,0,22,1,0,10,15,0,0,21,5,7,3,1,2,2,2,1,0,0,0,39,0,0,0,752,886,654,501,213,315,291,655,223,156,169,397,556,262,166,322,14,192,810,476,74,122,233,7,54,79,61,0,0,0,0,6,2319,1573,2468,1317,951,1152,872,1072,1459,196,221,809,1256,492,745,1965,149,1012,2901,1833,237,390,1006,13,170,42,0,0,0,0},
{2183,17947,57,995,2,1,0,1,82,172,4,142,3,7,206,392,48,7,159,90,54,24,16,16,10,16,11,5,25,169,10,1,22,0,1295,998,819,417,256,634,738,1089,3221,264,123,396,654,533,402,604,25,156,832,1049,104,185,761,6,301,180,206,64,57,0,0,59,14534,4626,4281,3341,1150,4377,2524,5903,6782,499,902,2698,4711,2245,7043,3057,197,1915,9388,14471,1396,784,7253,9,2869,47,1,3,0,0},
{155,1033,185,540,0,0,0,0,6,0,30,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{1502,1413,1,1,0,0,0,0,0,1,2,0,0,56,1,16,0,2,0,0,0,0,0,0,0,0,0,0,6,0,0,0,1,0,391,111,40,69,34,35,38,116,329,17,8,45,49,148,121,43,0,17,92,177,14,9,298,0,179,11,0,0,0,0,0,3,69,51,20,22,5,16,17,21,48,12,2,13,12,12,20,13,0,9,27,86,1,5,49,0,32,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,54,1,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,11,0,0,0,0,0,0,0,0,5,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{36,266,5,6,0,0,0,0,4,0,0,0,0,3,1,3,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,4,0,2,1,4,4,1,3,3,5,3,1,0,2,0,6,1,0,0,1,14,13,0,0,0,0,0,0,0,0,0,0,0,0,7,2,11,129,12,3,0,5,3,0,0,170,83,0,2,0,0,79,1147,886,2,77,0,0,0,0,0,0,0,0},
{0,1,2,1,0,0,0,0,0,0,0,0,7,0,10,1,0,0,40,24,5,9,1,8,2,3,1,0,0,0,0,0,2,0,6,3,1,0,1,2,1,0,1,2,0,0,2,2,0,2,0,1,3,5,0,0,0,0,1,0,0,0,0,0,0,0,25,3,2,2,6,1,0,3,9,1,0,0,5,1,9,2,1,0,12,7,0,1,5,2,0,0,0,0,0,0},
{21,73,0,3,0,0,0,0,0,0,1,38,0,59,2,30,1,0,0,3,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{19,99,0,0,0,0,0,0,0,38,0,1,0,0,0,2,0,0,24,5,11,4,6,4,9,10,5,39,0,0,0,0,0,0,1,0,7,1,1,4,0,2,3,0,0,2,2,0,0,17,0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
{0,3,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
{971,9218,0,757,0,0,0,0,33,0,2,0,0,0,61,0,0,2,7,3,5,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
{253,228,0,53,0,0,0,0,1,1,10,0,0,2,544,2,0,0,14,10,5,5,6,7,5,4,2,0,0,0,0,0,3,0,3,0,6,2,5,0,1,2,5,1,0,1,7,0,15,0,0,0,4,4,0,8,2,0,0,5,0,0,0,0,0,0,51,64,60,51,23,39,33,47,23,6,4,27,46,29,51,40,2,23,86,66,31,4,50,0,10,0,0,0,0,0},
{2527,3106,9,821,0,0,0,0,25,0,17,37,0,16,2,576,2,4,2,2,2,2,0,3,5,0,1,0,0,0,0,0,6,0,1,1,1,1,2,1,0,0,0,1,0,1,0,1,0,1,0,2,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,5,1,5,3,0,0,0,0,0,2,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0},
{0,42,0,0,0,0,0,0,0,0,0,0,0,1,0,1,5,1,2,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,9,0,4,0,3,0,0,1,2,6,0,1,3,2,2,1,0,0,7,0,0,0,3,0,1,0,1,0,0,0,0,0,0,2,2,0,4,1,0,0,1,0,0,1,0,1,2,0,0,2,3,0,0,0,4,0,0,0,0,0,0,0},
{10,24,0,0,0,0,5,0,0,0,8,2,0,4,7,13,0,43,10,5,4,10,4,10,7,2,2,0,1,0,0,3,0,0,5,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0},
{12,88,0,1,0,0,1,0,0,0,14,4,0,14,5,35,0,28,19,28,19,17,14,11,17,21,98,1,1,0,0,14,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0},
{9,50,0,0,0,0,2,0,0,8,14,6,0,9,3,19,0,44,15,15,15,10,17,16,13,10,13,1,0,0,0,8,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0},
{8,28,0,0,0,0,1,0,0,0,9,4,0,10,6,12,0,14,16,17,16,16,10,8,10,12,13,0,0,0,0,6,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0},
{6,16,0,0,0,0,0,0,0,0,14,4,0,15,2,22,0,11,10,6,6,10,8,3,5,9,11,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0},
{7,18,0,0,0,0,2,0,0,0,5,1,0,4,11,11,0,8,4,6,10,8,7,6,6,4,4,1,0,0,0,5,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,6,0,0,0},
{7,19,0,0,0,0,1,0,0,0,17,7,0,2,5,15,0,11,9,1,4,5,2,1,9,0,4,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0},
{4,26,0,0,0,0,1,0,0,8,4,8,0,5,4,10,0,4,3,3,6,1,5,3,5,8,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,6,0,0,0},
{6,14,0,0,0,0,2,0,0,0,10,5,0,3,5,10,1,4,4,5,8,9,11,9,10,2,9,0,0,0,0,4,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,0,0,0},
{4,18,0,1,0,0,3,0,0,0,2,1,0,5,4,19,1,4,6,8,9,11,9,13,8,34,48,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,13,0,0,0},
{335,465,0,0,0,0,0,0,7,0,0,39,0,0,207,0,5,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{149,1306,0,27,0,0,0,0,5,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,0,0,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{40,8,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2496,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,45,0,0,0,0,0,0,0,0,0,1,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{338,748,192,560,0,0,0,0,6,0,5,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,770,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{70,245,0,0,0,0,0,2,0,0,1,0,0,17,0,7,1,3,2,1,3,1,2,0,0,0,0,7,0,0,0,0,0,0,2701,9,72,45,6,6,3,15,7,3,8,27,15,76,9,20,40,108,40,283,143,0,8,1,8,3,0,0,0,0,0,0,195,79,26,65,6,17,19,57,11,1,2,205,48,587,0,28,3,478,134,75,50,12,16,0,2,4,0,0,0,0},
{1,7,0,0,0,0,0,0,0,0,0,0,0,3,3,4,0,0,26,11,9,2,2,1,1,1,1,1,0,0,0,0,0,0,21,6,2,1,321,0,0,7,9,1,1,5,6,0,48,1,67,1,4,2,3,0,0,0,6,0,0,0,0,0,0,0,158,0,1,0,322,0,0,1,192,0,0,51,0,0,96,0,0,364,0,0,413,0,0,0,46,0,0,0,0,0},
{20,24,0,0,0,0,0,1,0,1,1,0,0,9,0,19,0,0,2,1,0,0,0,0,0,0,0,5,0,0,0,0,0,0,15,12,4,2,136,2,1,57,22,1,147,143,9,2,32,6,0,3,1,16,1,0,2,0,1,1,0,0,0,0,0,0,383,0,0,0,31,0,0,160,88,0,0,135,0,0,421,0,0,41,0,0,48,0,0,0,19,4,0,0,0,0},
{9,19,2,0,0,0,0,0,1,0,0,0,0,7,1,12,1,0,2,0,0,0,0,0,0,0,0,1,2,0,0,109,0,0,114,9,2,1,27,2,0,5,289,1,1,1,0,3,257,1,0,151,7,2,8,0,0,0,1,0,0,0,0,0,0,0,159,0,0,0,160,0,0,1,79,1,0,0,0,1,217,0,0,40,0,0,52,0,3,0,3,0,0,0,0,0},
{139,23,0,0,0,0,0,0,0,0,0,0,0,13,0,10,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,117,8,3,296,6,1,0,0,0,0,0,0,6,165,146,1,1,147,218,32,0,0,1,0,0,0,0,0,0,0,0,0,83,1,6,37,1,1,3,1,7,0,2,42,19,80,1,8,1,45,12,11,24,49,1,55,0,2,0,0,0,0},
{4,2,1,0,0,0,0,0,0,1,0,0,0,7,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,9,1,1,1,1,1,0,3,0,0,2,2,0,3,2,0,37,0,1,2,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,32,0,0,0,101,0,0,56,0,0,480,0,0,159,0,2,42,0,0,0,0,0,0,0,0,0},
{0,6,1,0,0,0,0,0,1,0,0,0,0,8,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,75,0,0,25,2,0,3,0,1,0,0,2,1,8,3,0,6,4,0,1,0,0,0,0,0,0,0,0,0,0,0,536,0,0,0,43,0,0,5,42,0,0,17,0,0,253,0,0,91,0,0,56,0,2,0,1,0,0,0,0,0},
{4,12,6,1,0,0,0,0,0,0,1,0,0,6,3,10,0,5,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,34,6,1,6,56,2,0,0,54,1,0,0,0,50,1,0,0,3,3,4,1,0,0,0,5,0,0,0,0,0,0,0,229,0,0,0,505,0,0,0,484,0,0,0,4,0,487,0,0,5,0,0,65,0,0,0,9,0,0,0,0,0},
{78,2571,1,2,0,0,0,0,252,0,0,0,0,27,2,19,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,16,0,30,10,265,113,3,2,3,1,19,0,0,7,198,24,240,2,1,4,30,11,0,12,0,1,0,0,0,0,0,0,0,0,3,3,3,2,0,110,1,0,0,0,1,5,35,185,3,0,0,20,74,340,0,3,0,1,0,1,0,0,0,0},
{2,16,0,0,0,0,0,0,0,0,0,0,0,12,0,20,1,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,6,1,0,0,0,2,0,1,0,0,0,0,2,0,51,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,37,0,0,0,4,0,0,0,0,0,123,0,0,3,0,0,127,0,0,0,0,0,0,0,0,0},
{139,11,0,0,0,0,0,0,0,0,0,0,0,26,0,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,3,0,0,7,0,1,0,0,5,0,1,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,1,0,0,0,0,0,0,0,120,0,0,0,50,0,0,6,49,0,0,5,0,24,21,0,0,17,0,0,5,0,0,0,2,0,0,0,0,0},
{6,46,0,1,0,0,0,0,1,0,0,0,0,9,0,7,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,174,0,0,3,146,0,0,0,6,2,1,10,2,0,4,0,0,0,2,16,0,0,0,0,3,0,0,0,0,0,0,0,219,0,0,0,110,0,0,0,100,0,0,1,0,0,119,0,0,0,0,3,118,0,0,0,10,0,0,0,0,0},
{16,15,0,0,0,0,0,0,0,0,0,0,0,10,3,11,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,46,1,4,2,196,1,0,1,2,4,0,1,0,2,15,5,0,0,2,2,1,0,2,0,0,0,0,0,0,0,0,0,618,2,72,0,160,0,0,0,94,0,0,0,2,0,127,0,0,37,1,1,52,0,0,0,73,0,0,0,0,0},
{48,229,0,0,0,0,0,0,0,0,1,0,0,7,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,2,24,16,165,0,11,1,35,1,1,0,1,2,7,1,0,29,2,49,0,1,2,0,8,0,0,0,0,0,0,0,223,0,0,1,70,0,1,0,96,0,0,0,0,1,508,0,0,0,0,0,15,0,0,0,1,0,0,0,0,0},
{512,42,4,0,0,0,0,0,23,0,0,0,0,62,13,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,7,1,2,10,2,3,68,53,2,0,24,2,1,427,2,4,0,56,5,11,4,0,6,0,0,0,0,0,3,0,0,0,3,6,5,7,2,17,1,144,0,0,4,98,5,79,5,46,0,105,11,15,38,2,2,5,0,1,0,0,0,0},
{8,7,0,0,0,0,0,0,1,0,0,0,0,5,0,6,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,18,1,34,2,148,0,0,6,0,0,0,1,2,0,7,4,0,5,3,18,5,1,0,0,1,0,0,0,0,0,0,0,227,0,0,0,82,3,0,39,32,0,0,38,0,0,91,0,0,216,2,2,90,0,0,0,9,0,0,0,0,0},
{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,105,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0},
{19,35,1,1,0,0,0,1,0,0,0,0,0,7,0,13,1,0,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,108,0,4,1,32,0,56,0,140,1,1,39,2,2,215,4,0,58,28,5,0,0,2,0,61,0,0,0,0,0,0,0,59,0,0,1,121,0,0,9,38,0,0,0,0,0,62,0,0,0,0,0,35,0,1,0,7,0,0,0,0,0},
{51,222,1,0,0,0,0,0,0,0,0,0,0,12,0,17,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,25,7,23,3,3,1,6,6,9,2,0,0,3,1,2,1,0,3,4,16,27,1,2,1,0,0,0,0,0,0,0,0,208,0,115,0,102,0,0,154,173,0,5,44,24,4,509,68,3,1,0,142,110,0,19,0,15,3,0,0,0,0},
{40,23,6,1,0,0,0,2,1,0,0,0,0,10,0,6,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,7,1,2,1,9,1,0,33,222,2,0,2,3,3,185,0,0,127,1,3,2,4,2,1,3,0,0,0,0,0,0,0,48,0,0,0,61,0,0,1026,38,0,0,0,0,0,138,0,0,141,1,0,27,0,30,0,6,0,0,0,0,0},
{4,2,0,0,0,0,0,0,2,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,140,0,0,0,1,0,0,1,29,2,4,0,1,0,66,13,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,0,0,2,14,1,71,0,18,0,16,3,6,0,0,0,0,0,0,0,0,0,0},
{8,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,1,0,24,0,0,1,1,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,50,0,0,0,91,0,0,4,0,0,95,0,0,16,0,0,2,0,0,0,0,0,0,0,0,0},
{6,6,1,0,0,0,0,0,0,0,0,0,0,2,0,7,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,10,1,3,1,2,3,1,2,4,2,0,1,0,0,1,0,0,0,1,0,0,1,0,1,2,0,0,0,0,0,0,0,127,0,0,0,212,0,0,670,164,0,0,0,0,0,73,0,0,15,0,0,3,0,0,0,8,0,0,0,0,0},
{3,3,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
{61,24,0,0,0,0,0,0,2,0,0,0,0,9,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,5,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,11,0,0,0,147,0,0,0,1,0,0,0,0,0,359,1,0,0,0,0,7,2,0,0,0,0,0,0,0,0},
{2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,226,0,0,0,7,0,0,0,6,0,0,0,0,0,18,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,43,20,21,21,11,4,4,3,0,0,0,0,0,0,0,4,0,2,0,0,0,0,0,0,0,0,0,0,0,0,57,0,1,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,1,7,2,0,4,1,0,2,0,0,0,1,2,5,2,1,2,6,5,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0,2,0,0,1,1,2,0,0,0,0,0,0,0,0,0},
{4,210,0,1,0,0,0,0,0,0,3,0,0,10,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{45281,146311,1951,5958,172,1,18,7,3012,247,247,329,12,11065,2092,7210,123,195,485,312,230,173,148,133,130,144,232,1060,1495,170,2545,169,2622,4,6138,2229,2029,1764,1828,1031,1240,2065,4736,470,500,1121,1582,1727,1952,1115,149,1176,2150,2221,431,345,1331,18,637,283,268,64,268,2,0,68,73799,12034,21330,29226,60740,13981,19726,35397,55202,969,7223,36504,18766,52114,62298,15074,784,45530,46128,63149,27516,5918,14642,1416,19197,872,44,4,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,0,0,0,0,0,1,4,0,0,1,3,2,4,1,0,0,1,4,0,0,5,0,0,0,0,0,0,0,0,0,2,4,3,0,0,2,2,2,2,0,0,0,0,3,1,4,0,0,2,4,2,0,2,0,0,0,0,0,0,0},
{1375,3963,53,1,0,0,0,0,35,0,2,0,0,142,50,70,1,0,0,0,0,0,0,0,0,0,0,12,15,0,0,0,6,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6357,1657,2427,2720,67,372,1222,254,3193,52,591,6200,1695,12858,44,1547,16,6781,5359,9493,849,1162,624,183,2193,157,0,0,0,0},
{140,89,6,0,0,0,0,0,2,0,0,0,0,27,18,21,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1344,225,8,16,1835,2,1,7,1237,22,0,1607,8,11,1747,2,0,989,259,67,1401,11,2,0,882,0,0,0,0,0},
{784,333,3,1,0,0,0,0,2,0,0,0,0,32,1,23,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,3,1,20,11,1,2,11,1,2,0,12,3,5,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2560,1,361,2,2034,1,0,3642,1388,0,1569,913,6,13,3488,1,21,1058,70,1630,896,0,0,0,413,3,0,0,0,0},
{2062,11680,87,12,0,0,0,0,94,0,4,3,0,1277,84,695,7,0,0,0,0,0,0,0,0,0,0,151,99,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1073,54,31,395,2631,35,162,57,2511,31,3,379,82,297,1934,25,4,797,1147,23,457,43,88,0,625,1,0,0,0,0},
{6439,11093,72,7,0,0,0,0,206,0,6,0,0,743,55,626,2,0,0,0,0,0,0,0,0,0,0,84,76,0,0,0,321,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3322,302,1485,3924,2028,582,434,141,550,20,65,3117,1468,5075,376,887,113,7948,3492,2624,200,806,455,767,776,47,3,0,0,0},
{440,3816,4,5,0,0,0,0,2,0,0,0,0,63,35,67,0,0,1,0,0,0,0,0,0,0,0,223,9,0,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1063,3,1,3,826,708,3,4,1450,5,2,515,6,3,2426,2,0,854,31,440,636,0,2,0,129,0,0,0,0,0},
{1095,4526,243,17,0,0,0,0,14,0,2,0,0,540,40,196,9,0,0,0,0,0,0,0,0,0,0,52,95,0,0,0,34,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1128,17,0,9,1696,11,1830,2274,1070,1,4,637,55,347,1391,7,0,1222,416,58,484,1,10,0,190,3,0,0,0,0},
{1001,3331,102,6,0,0,0,0,31,0,2,0,0,459,55,198,1,0,0,0,0,0,0,0,0,0,0,20,68,0,0,0,42,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,7403,44,7,16,8401,35,16,35,5549,0,3,176,166,130,3682,12,3,609,102,1538,1021,1,71,0,1058,0,0,0,0,0},
{205,56,3,1,0,0,0,0,7,0,0,0,0,12,34,15,3,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1636,585,3591,3060,1184,1074,2203,13,20,11,503,3806,2105,14723,2898,656,66,1930,6185,6743,242,1217,7,148,1,253,0,0,0,0},
{3,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,0,107,1,0,0,55,0,1,0,0,1,207,0,0,0,1,0,487,0,0,0,0,0,0,0,0,0},
{651,1566,34,2,0,0,0,0,27,0,0,0,0,246,25,129,0,0,0,0,0,0,0,0,0,0,0,13,38,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,26,5,7,1428,14,11,26,1109,3,4,145,21,709,64,18,0,19,425,29,31,0,64,0,182,0,0,0,0,0},
{1778,3556,41,7,1,0,0,0,57,0,3,0,0,603,61,221,9,0,0,0,0,0,0,0,0,0,0,13,70,0,0,0,25,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3531,75,125,2149,4318,765,109,27,3618,1,432,5658,300,11,3136,136,0,60,962,562,777,155,351,0,2795,4,0,0,0,0},
{830,1668,38,4,0,0,0,0,17,0,1,0,0,219,22,188,5,0,0,4,0,0,0,0,0,0,0,14,27,0,0,0,22,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,3747,485,9,8,3325,63,2,10,1858,0,0,58,428,83,1723,1387,2,5,590,10,903,2,7,0,999,0,0,0,0,0},
{3415,7574,110,25,0,0,0,0,1017,1,7,0,0,791,84,509,1,0,0,0,0,0,0,0,0,0,0,38,171,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,1710,71,1783,7428,2974,298,7296,113,2113,59,930,385,49,549,3329,37,57,50,1995,4815,622,191,59,28,1254,34,0,0,0,0},
{788,5630,78,3,0,0,0,0,53,0,0,0,0,668,60,148,0,0,0,0,0,0,0,0,0,0,0,20,58,0,0,0,57,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,552,605,918,1648,215,3691,694,173,888,18,748,2509,3218,8366,2804,1188,18,7401,1663,2696,9953,685,3500,152,362,67,0,0,0,0},
{391,921,29,11,0,0,0,0,18,0,3,0,1,148,21,100,0,0,0,4,0,0,2,0,0,0,0,7,31,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1890,21,7,4,2028,10,4,890,1046,2,85,1198,23,9,1743,845,0,1617,364,465,836,0,16,0,269,0,0,0,0,0},
{4,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,778,0,0,0,0,0,0,0,0,0},
{1913,5286,55,8,0,0,0,0,115,1,3,1,0,607,52,387,2,0,0,0,0,0,0,0,0,0,0,47,87,0,0,0,69,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4405,275,604,1836,6054,166,821,94,4363,12,520,680,944,815,4921,307,10,2787,1489,2493,950,271,124,3,1946,6,0,0,0,0},
{2256,11921,157,50,0,0,0,0,165,0,9,0,0,1353,40,726,3,0,0,0,0,0,0,0,0,0,0,74,241,0,0,5,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2521,458,886,47,3978,85,40,2390,2701,1,543,500,619,269,2831,1130,110,13,1766,6007,1501,12,309,0,310,1,0,0,0,0},
{3378,13644,158,30,0,0,0,0,374,0,10,1,0,1087,109,734,3,0,0,0,0,0,0,0,0,0,0,98,168,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3011,37,400,18,5005,120,12,13853,5388,0,8,833,93,52,6310,45,0,2349,1216,1183,1296,4,409,0,1241,60,0,0,0,0},
{150,1799,12,0,0,0,0,0,94,0,1,0,0,84,3,64,0,0,0,0,0,0,0,0,0,0,0,15,9,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825,529,1349,795,539,142,1349,28,746,12,27,2367,1052,2931,120,1221,4,3797,3369,3842,19,20,3,39,67,41,0,0,0,0},
{22,4,0,0,0,0,0,0,1,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,633,0,0,2,3690,0,0,0,1147,0,1,2,0,0,337,0,0,7,1,0,22,3,0,0,42,1,0,0,0,0},
{264,1482,44,4,0,0,0,0,9,0,2,0,0,272,27,114,0,0,0,0,0,0,0,0,0,0,0,8,32,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3429,32,5,95,1176,48,5,1982,2389,0,32,199,15,855,1657,10,0,172,180,21,18,0,12,0,22,1,0,0,0,0},
{140,107,4,1,0,0,0,0,3,0,0,0,0,26,10,12,1,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,1,139,0,98,3,2,18,170,1,0,2,0,1,41,169,3,0,1,245,22,1,6,1,89,0,0,0,0,0},
{2819,7239,141,16,0,0,0,0,211,0,5,0,0,1147,73,525,4,0,0,0,0,0,0,0,0,0,0,80,150,0,0,0,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,170,108,108,68,420,14,26,28,311,1,5,149,156,186,2915,186,1,207,1236,202,12,2,76,10,6,7,0,0,0,0},
{65,18,1,0,0,0,0,0,2,0,0,0,0,4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,0,0,1,212,0,1,0,113,0,2,36,1,0,93,2,0,2,2,2,8,2,2,0,52,82,0,0,0,0},
{2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,12,4,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0},
{0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{45281,146311,1951,5958,172,1,18,7,3012,247,247,329,12,11065,2092,7210,123,195,485,312,230,173,148,133,130,144,232,1060,1495,170,2545,169,2622,4,6138,2229,2029,1764,1828,1031,1240,2065,4736,470,500,1121,1582,1727,1952,1115,149,1176,2150,2221,431,345,1331,18,637,283,268,64,268,2,0,68,73799,12034,21330,29226,60740,13981,19726,35397,55202,969,7223,36504,18766,52114,62298,15074,784,45530,46128,63149,27516,5918,14642,1416,19197,872,44,4,0,0},
{45281,146311,1951,5958,172,1,18,7,3012,247,247,329,12,11065,2092,7210,123,195,485,312,230,173,148,133,130,144,232,1060,1495,170,2545,169,2622,4,6138,2229,2029,1764,1828,1031,1240,2065,4736,470,500,1121,1582,1727,1952,1115,149,1176,2150,2221,431,345,1331,18,637,283,268,64,268,2,0,68,73799,12034,21330,29226,60740,13981,19726,35397,55202,969,7223,36504,18766,52114,62298,15074,784,45530,46128,63149,27516,5918,14642,1416,19197,872,44,4,0,0},
}};
#else
#include "weights.h"
#endif

// Whould be really really cool to make this constexpr.
void build_trees() {
	for (UT i = 0; i < FREQ.size(); i++) {
		TREES.emplace_back(FREQ[i]);
	}
}
